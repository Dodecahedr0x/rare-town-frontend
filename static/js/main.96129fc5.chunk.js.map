{"version":3,"sources":["components/Navbar/DesktopSubNav.tsx","components/Navbar/items.ts","components/Navbar/DesktopNav.tsx","components/Navbar/MobileNav.tsx","components/WalletModal/WalletModal.tsx","constants/index.ts","utils/index.ts","contexts/Collection/Context.tsx","components/ConfirmationModal/index.tsx","contexts/Collection/Provider.tsx","hooks/useCollection.tsx","components/Navbar/WalletButton.tsx","components/Navbar/Navbar.tsx","views/Home/components/TokenCard.tsx","hooks/usePaginatedCollection.ts","views/Home/Home.tsx","views/MySteads/components/TokenCard.tsx","views/MySteads/MySteads.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DesktopSubNav","label","href","subLabel","newTab","role","display","p","rounded","_hover","bg","useColorModeValue","target","undefined","direction","align","transition","_groupHover","color","fontWeight","fontSize","transform","opacity","justify","flex","w","h","as","ChevronRightIcon","NAV_ITEMS","children","DesktopNav","linkColor","linkHoverColor","popoverContentBgColor","spacing","map","navItem","trigger","placement","textDecoration","border","boxShadow","minW","child","MobileNavItem","useDisclosure","isOpen","onToggle","onClick","py","Link","ChevronDownIcon","in","animateOpacity","style","marginTop","mt","pl","borderLeft","borderStyle","borderColor","MobileNav","md","WalletModal","onClose","wallet","useWallet","handleChooseWallet","useCallback","walletName","a","select","connect","my","wallets","width","leftIcon","src","icon","alt","name","COLLECTION_CLAIM_DELAY","anchor","SOLSTEADS_COLLECTION","PublicKey","findTokenAddress","collectionIdl","metadata","address","Map","walletAddress","tokenMintAddress","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","findAssociatedTokenAddress","ASSOCIATED_TOKEN_PROGRAM_ID","Context","createContext","mints","createAccount","Promise","claimToken","spendTokens","ConfirmationModal","transaction","maxW","size","programID","idl","CollectionProvider","toast","useToast","connection","useConnection","confirming","onOpen","useState","currentTransaction","setCurrentTransaction","ownedTokens","setOwnedTokens","userAccount","setUserAccount","collection","setCollection","setMints","fetchCollection","provider","preflightCommitment","program","account","fetch","fetchedCollection","zeroKey","filter","item","mint","equals","useEffect","fetchOwned","publicKey","programs","Metadata","findByOwnerV2","e","pubkey","toString","fetchMints","ranks","Array","length","fill","_","i","sort","b","received","sub","toNumber","getPDA","pda","load","fetchedMetadata","axios","get","data","uri","response","old","array","slice","rank","Number","imageUri","image","solsteadsUrl","external_url","owned","includes","fetchUserAccount","collectionKey","token","Token","getAssociatedTokenAddress","associatedAddress","getAccountInfo","console","log","signTransaction","tokenAccountAddress","instructions","createAssociatedTokenAccountInstruction","createInitAccountInstruction","sendTransaction","Transaction","add","signature","index","indexOf","tokenAccount","rpc","claim","accounts","claimedToken","claimedTokenAccount","owner","mintAuthority","tokenAuthority","tokenProgram","systemProgram","SystemProgram","programId","title","description","status","duration","isClosable","amount","spend","targetToken","spender","Object","keys","Provider","value","useBalances","useContext","CollectionContext","WalletButton","useCollection","connected","variant","colorScheme","disconnect","substr","Logo","createIcon","displayName","viewBox","path","d","WithSubnavigation","minH","base","px","borderBottom","ml","boxSize","TokenCard","setAmount","timeLeft","setTimeLeft","timeBeforeClaim","difference","Date","now","claimed","hours","Math","floor","minutes","seconds","timer","setTimeout","clearTimeout","alignItems","justifyContent","borderWidth","shadow","maxH","gap","onChange","disabled","lt","isFullWidth","usePaginatedCollection","allMints","currentPage","setCurrentPage","pageSize","setPageSize","sortedMints","useMemo","isLastPage","nextPage","previousPage","Home","margin","isAttached","m","thickness","MySteads","Providers","network","WalletAdapterNetwork","Devnet","endpoint","clusterApiUrl","getPhantomWallet","getSlopeWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","onError","error","message","ConnectionProvider","WalletProvider","App","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96129fc5.chunk.js","sourcesContent":["import { ChevronRightIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Flex,\n  Stack,\n  Link,\n  Text,\n  useColorModeValue,\n  Icon,\n} from \"@chakra-ui/react\";\nimport { NavItem } from \"./types\";\n\nconst DesktopSubNav = ({ label, href, subLabel, newTab }: NavItem) => {\n  return (\n    <Link\n      href={href}\n      role={\"group\"}\n      display={\"block\"}\n      p={2}\n      rounded={\"md\"}\n      _hover={{ bg: useColorModeValue(\"pink.50\", \"gray.900\") }}\n      target={newTab ? \"_blank\" : undefined}\n    >\n      <Stack direction={\"row\"} align={\"center\"}>\n        <Box>\n          <Text\n            transition={\"all .3s ease\"}\n            _groupHover={{ color: \"pink.400\" }}\n            fontWeight={500}\n          >\n            {label}\n          </Text>\n          <Text fontSize={\"sm\"}>{subLabel}</Text>\n        </Box>\n        <Flex\n          transition={\"all .3s ease\"}\n          transform={\"translateX(-10px)\"}\n          opacity={0}\n          _groupHover={{ opacity: \"100%\", transform: \"translateX(0)\" }}\n          justify={\"flex-end\"}\n          align={\"center\"}\n          flex={1}\n        >\n          <Icon color={\"pink.400\"} w={5} h={5} as={ChevronRightIcon} />\n        </Flex>\n      </Stack>\n    </Link>\n  );\n};\n\nexport default DesktopSubNav;\n","import { NavItem } from \"./types\";\n\nconst NAV_ITEMS: Array<NavItem> = [\n  {\n    label: \"Leaderboard\",\n    href: \"#/\"\n  },\n  {\n    label: \"My Steads\",\n    href: \"#/mysteads\"\n  },\n  {\n    label: \"Ressources\",\n    children: [\n      {\n        label: \"RareTown programs on GitHub\",\n        subLabel: \"Solana program repo\",\n        href: \"https://github.com/Dodecahedr0x/rare-town\",\n        newTab: true,\n      },\n      {\n        label: \"RareTown front-end on GitHub\",\n        subLabel: \"Front-end repo\",\n        href: \"https://github.com/Dodecahedr0x/rare-town-frontend\",\n        newTab: true,\n      },\n      {\n        label: \"SolSteads\",\n        subLabel: \"SolSteads official website\",\n        href: \"https://solsteads.com/\",\n        newTab: true,\n      },\n      {\n        label: \"SolSteads Discord\",\n        subLabel: \"SolSteads official Discord server\",\n        href: \"https://discord.gg/tbZe5jyx\",\n        newTab: true,\n      },\n    ],\n  },\n];\n\nexport default NAV_ITEMS;\n","import { useColorModeValue } from \"@chakra-ui/color-mode\";\nimport {\n  Box,\n  Stack,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  Link,\n} from \"@chakra-ui/react\";\nimport DesktopSubNav from \"./DesktopSubNav\";\nimport NAV_ITEMS from \"./items\";\n\nconst DesktopNav = () => {\n  const linkColor = useColorModeValue(\"gray.600\", \"gray.200\");\n  const linkHoverColor = useColorModeValue(\"gray.800\", \"white\");\n  const popoverContentBgColor = useColorModeValue(\"white\", \"gray.800\");\n\n  return (\n    <Stack direction={\"row\"} spacing={4}>\n      {NAV_ITEMS.map((navItem) => (\n        <Box key={navItem.label}>\n          <Popover trigger={\"hover\"} placement={\"bottom-start\"}>\n            <PopoverTrigger>\n              <Link\n                p={2}\n                href={navItem.href}\n                fontSize={\"sm\"}\n                fontWeight={500}\n                color={linkColor}\n                _hover={{\n                  textDecoration: \"none\",\n                  color: linkHoverColor,\n                }}\n                target={navItem.newTab ? \"_blank\" : undefined}\n              >\n                {navItem.label}\n              </Link>\n            </PopoverTrigger>\n\n            {navItem.children && (\n              <PopoverContent\n                border={0}\n                boxShadow={\"xl\"}\n                bg={popoverContentBgColor}\n                p={4}\n                rounded={\"xl\"}\n                minW={\"sm\"}\n              >\n                <Stack>\n                  {navItem.children.map((child) => (\n                    <DesktopSubNav key={child.label} {...child} />\n                  ))}\n                </Stack>\n              </PopoverContent>\n            )}\n          </Popover>\n        </Box>\n      ))}\n    </Stack>\n  );\n};\n\nexport default DesktopNav;\n","import { ChevronDownIcon } from \"@chakra-ui/icons\";\nimport {\n  Collapse,\n  Flex,\n  Link,\n  Icon,\n  Stack,\n  Text,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport NAV_ITEMS from \"./items\";\nimport { NavItem } from \"./types\";\n\nconst MobileNavItem = ({ label, children, href }: NavItem) => {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Stack spacing={4} onClick={children && onToggle}>\n      <Flex\n        py={2}\n        as={Link}\n        href={href ?? \"#\"}\n        justify={\"space-between\"}\n        align={\"center\"}\n        _hover={{\n          textDecoration: \"none\",\n        }}\n      >\n        <Text\n          fontWeight={600}\n          color={useColorModeValue(\"gray.600\", \"gray.200\")}\n        >\n          {label}\n        </Text>\n        {children && (\n          <Icon\n            as={ChevronDownIcon}\n            transition={\"all .25s ease-in-out\"}\n            transform={isOpen ? \"rotate(180deg)\" : \"\"}\n            w={6}\n            h={6}\n          />\n        )}\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity style={{ marginTop: \"0!important\" }}>\n        <Stack\n          mt={2}\n          pl={4}\n          borderLeft={1}\n          borderStyle={\"solid\"}\n          borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n          align={\"start\"}\n        >\n          {children &&\n            children.map((child) => (\n              <Link key={child.label} py={2} href={child.href}>\n                {child.label}\n              </Link>\n            ))}\n        </Stack>\n      </Collapse>\n    </Stack>\n  );\n};\n\nconst MobileNav = () => {\n  return (\n    <Stack\n      bg={useColorModeValue(\"white\", \"gray.800\")}\n      p={4}\n      display={{ md: \"none\" }}\n    >\n      {NAV_ITEMS.map((navItem) => (\n        <MobileNavItem key={navItem.label} {...navItem} />\n      ))}\n    </Stack>\n  );\n};\n\nexport default MobileNav;\n","import {\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Image,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletName } from \"@solana/wallet-adapter-wallets\";\nimport { useCallback } from \"react\";\n\ninterface WalletModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst WalletModal: React.FC<WalletModalProps> = ({ isOpen, onClose }) => {\n  const wallet = useWallet();\n\n  const handleChooseWallet = useCallback(async (walletName: WalletName) => {\n    wallet.select(walletName)\n    wallet.connect()\n  }, [wallet])\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Connect a wallet</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing=\"8px\" my={2}>\n            {wallet.wallets.map((wallet) => (\n              <Button\n                key={wallet.name}\n                width=\"100%\"\n                py={2}\n                leftIcon={\n                  <Image\n                    src={wallet.icon}\n                    alt={wallet.name}\n                    width={8}\n                  />\n                }\n                onClick={() => handleChooseWallet(wallet.name)}\n              >\n                {wallet.name}\n              </Button>\n            ))}\n          </VStack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default WalletModal;\n","import * as anchor from \"@project-serum/anchor\";\n\nimport collectionIdl from \"./idls/collection.json\"\n\nexport const COLLECTION_CLAIM_DELAY = new anchor.BN(86400)\n\nexport const WRAPPED_SOL_MINT = new anchor.web3.PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\nexport const SOLSTEADS_COLLECTION = new anchor.web3.PublicKey(\n  \"HNWbFSocM1NpG9nfMjCGy5oup2HJDT2BhyR1MdUPxdLu\"\n);\nexport const COLLECTION_ADDRESS = new anchor.web3.PublicKey(\n  collectionIdl.metadata.address\n);\n","import * as anchor from \"@project-serum/anchor\"\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  Token,\n  AccountInfo as TokenAccount,\n  AccountLayout\n} from \"@solana/spl-token\";\nimport { WRAPPED_SOL_MINT } from \"../constants\";\n\nconst accountsCache = new Map<string, TokenAccount>();\n\nexport const getCachedAccount = (\n  predicate: (account: TokenAccount) => boolean\n) => {\n  for (const account of accountsCache.values()) {\n    if (predicate(account)) {\n      return account as TokenAccount;\n    }\n  }\n};\n\nexport const createSplAccount = async(\n  instructions: anchor.web3.TransactionInstruction[],\n  payer: anchor.web3.PublicKey,\n  accountRentExempt: number,\n  mint: anchor.web3.PublicKey,\n  owner: anchor.web3.PublicKey,\n  space: number\n) => {\n  const account = await findTokenAddress(owner, mint);\n  instructions.push(\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account,\n      lamports: accountRentExempt,\n      space,\n      programId: TOKEN_PROGRAM_ID,\n    })\n  );\n\n  instructions.push(\n    Token.createInitAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      mint,\n      account,\n      owner\n    )\n  );\n\n  return account;\n}\n\nexport const shortAddress = (address: string | undefined): string => {\n  if(!address) return \"???\"\n  return address.substr(0, 4) + \"...\" + address.substr(address.length - 4, 4);\n};\n\nexport const findTokenAddress = async (\n  walletAddress: anchor.web3.PublicKey,\n  tokenMintAddress: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (await anchor.web3.PublicKey.findProgramAddress(\n      [\n          walletAddress.toBuffer(),\n          TOKEN_PROGRAM_ID.toBuffer(),\n          tokenMintAddress.toBuffer(),\n      ],\n      TOKEN_PROGRAM_ID\n  ))[0];\n}\n\nexport const findAssociatedTokenAddress = async (\n  walletAddress: anchor.web3.PublicKey,\n  tokenMintAddress: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (await anchor.web3.PublicKey.findProgramAddress(\n      [\n          walletAddress.toBuffer(),\n          TOKEN_PROGRAM_ID.toBuffer(),\n          tokenMintAddress.toBuffer(),\n      ],\n      ASSOCIATED_TOKEN_PROGRAM_ID\n  ))[0];\n}\n\nexport const findOrCreateAccountByMint = async (\n  payer: anchor.web3.PublicKey,\n  owner: anchor.web3.PublicKey,\n  instructions: anchor.web3.TransactionInstruction[],\n  cleanupInstructions: anchor.web3.TransactionInstruction[],\n  accountRentExempt: number,\n  mint: anchor.web3.PublicKey, // use to identify same type\n  signers: anchor.web3.Keypair[],\n  excluded?: Set<string>\n): Promise<anchor.web3.PublicKey> => {\n  const accountToFind = mint.toBase58();\n  const account = getCachedAccount(\n    (acc) =>\n      acc.mint.toBase58() === accountToFind &&\n      acc.owner.toBase58() === owner.toBase58() &&\n      (excluded === undefined || !excluded.has(acc.address.toBase58()))\n  );\n  const isWrappedSol = accountToFind === WRAPPED_SOL_MINT.toBase58();\n\n  let toAccount: anchor.web3.PublicKey;\n  if (account && !isWrappedSol) {\n    toAccount = account.address;\n  } else {\n    // creating depositor pool account\n    const newToAccount = await createSplAccount(\n      instructions,\n      payer,\n      accountRentExempt,\n      mint,\n      owner,\n      AccountLayout.span\n    );\n\n    toAccount = newToAccount;\n    console.log(\"to account\", newToAccount.toString())\n    // signers.push(newToAccount);\n\n    if (isWrappedSol) {\n      cleanupInstructions.push(\n        Token.createCloseAccountInstruction(\n          TOKEN_PROGRAM_ID,\n          toAccount,\n          payer,\n          payer,\n          []\n        )\n      );\n    }\n  }\n\n  return toAccount;\n}","import { createContext } from \"react\";\n\nimport { ContextValues } from \"./types\";\n\nconst Context = createContext<ContextValues>({\n    mints: [],\n    createAccount: () => new Promise(() => {}),\n    claimToken: () => new Promise(() => {}),\n    spendTokens: () => new Promise(() => {})\n});\n\nexport default Context;\n","import {\n  VStack,\n  Image,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\n\ninterface ConfirmationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  transaction: string;\n}\n\nconst ConfirmationModal: React.FC<ConfirmationModalProps> = ({\n  isOpen,\n  onClose,\n  transaction,\n}) => {\n  const wallet = useWallet();\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent maxW=\"350px\">\n        <ModalHeader>Confirming transaction...</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing=\"8px\" my={2}>\n            <Image src={wallet.wallet?.icon} w=\"100%\" h=\"100%\" />\n            <Spinner size=\"xl\" />\n          </VStack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ConfirmationModal;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport { PublicKey, SystemProgram } from \"@solana/web3.js\";\nimport {\n  AccountInfo as TokenAccount,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { programs } from \"@metaplex/js\";\n\nimport { Collection, CollectionItem, CollectionMint } from \".\";\nimport idl from \"../../constants/idls/collection.json\";\n\nimport Context from \"./Context\";\nimport axios from \"axios\";\nimport ConfirmationModal from \"components/ConfirmationModal\";\nimport { useDisclosure, useToast } from \"@chakra-ui/react\";\nimport { SOLSTEADS_COLLECTION } from \"../../constants\";\nimport { findAssociatedTokenAddress, findTokenAddress } from \"utils\";\n\nconst programID = new PublicKey(idl.metadata.address);\n\nconst CollectionProvider: React.FC = ({ children }) => {\n  const toast = useToast();\n  const { connection } = useConnection();\n  const wallet = useWallet();\n\n  const { isOpen: confirming, onOpen, onClose } = useDisclosure();\n  const [currentTransaction, setCurrentTransaction] = useState<string>(\"\");\n  const [ownedTokens, setOwnedTokens] = useState<string[]>([]);\n  const [userAccount, setUserAccount] = useState<TokenAccount>();\n  const [collection, setCollection] = useState<Collection>();\n  const [mints, setMints] = useState<CollectionMint[]>([]);\n\n  const fetchCollection = useCallback(async () => {\n    if (!wallet) return;\n\n    const provider = new anchor.Provider(connection, wallet as any, {\n      preflightCommitment: \"processed\",\n    });\n\n    const program = new anchor.Program(idl as anchor.Idl, programID, provider);\n\n    const fetchedCollection = (await program.account.collection.fetch(\n      SOLSTEADS_COLLECTION\n    )) as any;\n    const zeroKey = new anchor.web3.PublicKey(0);\n    fetchedCollection.mints = fetchedCollection.mints.filter(\n      (item: CollectionItem) => !item.mint.equals(zeroKey)\n    );\n    setCollection(fetchedCollection);\n  }, [connection, wallet]);\n\n  useEffect(() => {\n    fetchCollection();\n  }, [fetchCollection]);\n\n  const fetchOwned = useCallback(async () => {\n    if (!wallet || !collection || !wallet.publicKey) {\n      setOwnedTokens([]);\n    } else {\n      setOwnedTokens(\n        (\n          await programs.metadata.Metadata.findByOwnerV2(\n            connection,\n            wallet.publicKey\n          )\n        ).map((e) => e.pubkey.toString())\n      );\n    }\n  }, [connection, collection, wallet]);\n\n  useEffect(() => {\n    fetchOwned();\n  }, [fetchOwned]);\n\n  const fetchMints = useCallback(async () => {\n    if (!collection || !connection) return;\n\n    const ranks = new Array(collection.mints.length)\n      .fill(0)\n      .map((_, i) => i)\n      .sort((a, b) =>\n        collection.mints[b].received\n          .sub(collection.mints[a].received)\n          .toNumber()\n      );\n\n    for (const i in ranks) {\n      const pda = await programs.metadata.Metadata.getPDA(\n        collection.mints[ranks[i]].mint\n      );\n      const fetchedMetadata = await programs.metadata.Metadata.load(\n        connection,\n        pda\n      );\n      const response = await axios.get(fetchedMetadata.data.data.uri);\n      setMints((old) => {\n        let array = old?.slice();\n        array[i] = {\n          mint: collection.mints[ranks[i]],\n          rank: Number(i),\n          imageUri: response.data.image,\n          solsteadsUrl: response.data.external_url,\n          metadata: fetchedMetadata,\n          owned: ownedTokens.includes(fetchedMetadata.pubkey.toString()),\n        };\n        return array;\n      });\n    }\n  }, [connection, collection, ownedTokens]);\n\n  useEffect(() => {\n    fetchMints();\n  }, [fetchMints]);\n\n  const fetchUserAccount = useCallback(async () => {\n    if (!collection || !connection || !wallet.publicKey) return;\n\n    const collectionKey = new anchor.web3.PublicKey(collection.token);\n    try {\n      const associatedAddress = await Token.getAssociatedTokenAddress(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        collectionKey,\n        wallet.publicKey\n      );\n      const token = new Token(\n        connection,\n        collectionKey,\n        TOKEN_PROGRAM_ID,\n        wallet as any\n      );\n      setUserAccount(await token.getAccountInfo(associatedAddress));\n    } catch (err) {\n      console.log(\"User has no account yet\");\n    }\n  }, [connection, collection, wallet]);\n\n  useEffect(() => {\n    fetchUserAccount();\n  }, [fetchUserAccount]);\n\n  const createAccount = useCallback(async () => {\n    if (!wallet.publicKey || !wallet.signTransaction || !collection) return;\n\n    onOpen();\n\n    const collectionKey = new anchor.web3.PublicKey(collection.token);\n    const associatedAddress = await Token.getAssociatedTokenAddress(\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n      TOKEN_PROGRAM_ID,\n      collectionKey,\n      wallet.publicKey\n    );\n    const tokenAccountAddress = await findTokenAddress(\n      wallet.publicKey,\n      collectionKey\n    );\n    const instructions = [\n      Token.createAssociatedTokenAccountInstruction(\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n        TOKEN_PROGRAM_ID,\n        collectionKey,\n        associatedAddress,\n        wallet.publicKey,\n        wallet.publicKey\n      ),\n      Token.createInitAccountInstruction(\n        TOKEN_PROGRAM_ID,\n        collectionKey,\n        tokenAccountAddress,\n        wallet.publicKey\n      ),\n    ];\n\n    try {\n      const signature = await wallet.sendTransaction(\n        new anchor.web3.Transaction().add(...instructions),\n        connection\n      );\n\n      setCurrentTransaction(signature);\n    } catch (err) {\n      console.log(err);\n    } finally {\n      onClose();\n    }\n  }, [collection, connection, wallet, onClose, onOpen]);\n\n  const claimToken = useCallback(\n    async (mint: CollectionMint) => {\n      console.log(userAccount, collection);\n      if (!wallet || !collection || !userAccount || !wallet.publicKey) return;\n\n      onOpen();\n\n      const provider = new anchor.Provider(connection, wallet as any, {\n        preflightCommitment: \"processed\",\n      });\n      const program = new anchor.Program(\n        idl as anchor.Idl,\n        programID,\n        provider\n      );\n\n      const index = new anchor.BN(\n        collection.mints\n          .map((item) => item.mint.toString())\n          .indexOf(mint.mint.mint.toString())\n      );\n      const tokenAccount = await findAssociatedTokenAddress(\n        wallet.publicKey,\n        mint.mint.mint\n      );\n      try {\n        await program.rpc.claim(index, {\n          accounts: {\n            collection: SOLSTEADS_COLLECTION,\n            claimedToken: mint.mint.mint,\n            claimedTokenAccount: tokenAccount,\n            owner: wallet.publicKey,\n            tokenAccount: userAccount.address,\n            mint: collection.token,\n            mintAuthority: collection.tokenAuthority,\n            tokenProgram: TOKEN_PROGRAM_ID,\n            systemProgram: SystemProgram.programId,\n          },\n        });\n\n        toast({\n          title: \"Claim successful\",\n          description: `Successfully claimed $TOWN for \"${mint.metadata.data.data.name}\"`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n\n        // Update balance\n        await fetchCollection();\n      } catch (err) {\n        console.log(\"Failed claiming tokens\", err);\n\n        toast({\n          title: \"Claiming failed\",\n          description: `${err}`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n\n      onClose();\n    },\n    [\n      connection,\n      collection,\n      toast,\n      userAccount,\n      wallet,\n      onClose,\n      onOpen,\n      fetchCollection,\n    ]\n  );\n\n  const spendTokens = useCallback(\n    async (mint: CollectionMint, amount: anchor.BN) => {\n      if (!wallet || !collection || !userAccount || !wallet.publicKey) return;\n\n      onOpen();\n\n      const provider = new anchor.Provider(connection, wallet as any, {\n        preflightCommitment: \"processed\",\n      });\n      const program = new anchor.Program(\n        idl as anchor.Idl,\n        programID,\n        provider\n      );\n\n      const index = new anchor.BN(\n        collection.mints\n          .map((item) => item.mint.toString())\n          .indexOf(mint.mint.mint.toString())\n      );\n      try {\n        await program.rpc.spend(index, amount, {\n          accounts: {\n            collection: SOLSTEADS_COLLECTION,\n            targetToken: mint.mint.mint,\n            spender: wallet.publicKey,\n            tokenAccount: userAccount.address,\n            mint: collection.token,\n            mintAuthority: collection.tokenAuthority,\n            tokenProgram: TOKEN_PROGRAM_ID,\n          },\n        });\n\n        toast({\n          title: \"Spending successful\",\n          description: `Successfully gave ${\n            amount.toNumber() / 10 ** 9\n          } $TOWN for \"${mint.metadata.data.data.name}\"`,\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n\n        // Update balance\n        await fetchCollection();\n      } catch (err: any) {\n        console.log(\"Failed claiming tokens\", err, Object.keys(err));\n\n        toast({\n          title: \"Spending failed\",\n          description: `${err}`,\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      }\n\n      onClose();\n    },\n    [\n      connection,\n      collection,\n      toast,\n      userAccount,\n      wallet,\n      onClose,\n      onOpen,\n      fetchCollection,\n    ]\n  );\n\n  return (\n    <Context.Provider\n      value={{\n        collection,\n        mints,\n        userAccount,\n        createAccount,\n        claimToken,\n        spendTokens,\n      }}\n    >\n      {children}\n      <ConfirmationModal\n        isOpen={confirming}\n        onClose={onClose}\n        transaction={currentTransaction}\n      />\n    </Context.Provider>\n  );\n};\n\nexport default CollectionProvider;\n","import { useContext } from \"react\";\n\nimport { CollectionContext } from \"../contexts/Collection\";\n\nconst useBalances = () => {\n  return {\n    ...useContext(CollectionContext),\n  };\n};\n\nexport default useBalances;\n","import { Button, Tag, TagLabel } from \"@chakra-ui/react\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport WalletModal from \"../../components/WalletModal\";\nimport { useEffect } from \"react\";\nimport { shortAddress } from \"utils\";\n\nimport useCollection from \"../../hooks/useCollection\";\n\nconst WalletButton: React.FC = () => {\n  const { isOpen, onClose, onOpen } = useDisclosure();\n  const wallet = useWallet();\n  const { userAccount } = useCollection();\n\n  useEffect(() => {\n    if (wallet.connected) {\n      onClose();\n    }\n  }, [wallet, onClose]);\n\n  return (\n    <>\n      <WalletModal isOpen={isOpen} onClose={onClose} />\n      {wallet.connected ? (\n        <>\n          {userAccount && (\n            <Tag size=\"lg\" variant=\"subtle\" colorScheme=\"cyan\">\n              <TagLabel>{userAccount.amount.toNumber() / 10 ** 9} $TOWN</TagLabel>\n            </Tag>\n          )}\n          <Button onClick={wallet.disconnect}>\n            {shortAddress(wallet.publicKey?.toString())}\n          </Button>\n        </>\n      ) : (\n        <Button onClick={onOpen}>Connect</Button>\n      )}\n    </>\n  );\n};\n\nexport default WalletButton;\n","import {\n  Box,\n  Flex,\n  IconButton,\n  Stack,\n  Collapse,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { HamburgerIcon, CloseIcon, createIcon } from \"@chakra-ui/icons\";\n\nimport DesktopNav from \"./DesktopNav\";\nimport MobileNav from \"./MobileNav\";\n\nimport WalletButton from \"./WalletButton\";\n\nconst Logo = createIcon({\n  displayName: \"Logo\",\n  viewBox: \"0 0 538.27 742.48\",\n  path: (\n    <path\n      fill=\"currentColor\"\n      d=\"M741.65,815.19H711.52v-206H704V549.3h10.3V529.38h-2.76L680.24,397.64V360.25l20-.87v4.4l32.15-1.41s-10.35-2.64-8-4.46c5.4-4.25,12-3.54,4.92-3.86-2-.09-11.41-.37-19-.59a6.4,6.4,0,0,0-1.89-2.89c-2.25-1.58-23.64-1-28.16-.91v-4h-1.77v52L647.21,529.38h-2.76V549.3h10.28v41.59h-6.9v18.34h-6.42V590.89h-7.25v18.34h-8.49V590.89H618.4v18.34h-1.23v-72h7.09V523.46h-1.9l-21.57-90.87v-25.8l13.79-.61v3l22.18-1s-7.14-1.81-5.55-3.08c3.73-2.92,8.28-2.44,3.4-2.66-1.39-.06-7.88-.25-13.1-.41a4.29,4.29,0,0,0-1.29-2c-1.57-1.09-16.3-.72-19.43-.63v-2.75h-1.23v35.86l-13.93,58.76-58.09-145-20.77,51.86L464.89,221.63V164.2l30.69-1.35v6.77l49.4-2.17s-15.91-4-12.35-6.85c8.29-6.52,18.43-5.44,7.57-5.92-3.09-.14-17.51-.57-29.14-.91a9.43,9.43,0,0,0-2.93-4.44c-3.45-2.42-36.17-1.61-43.24-1.41v-6.13h-2.72v79.84L419.6,401,397.68,346.3,346,475.44,335.8,432.59v-25.8l13.78-.61v3l22.18-1s-7.14-1.81-5.54-3.08c3.72-2.92,8.28-2.44,3.4-2.66-1.39-.06-7.88-.25-13.1-.41a4.21,4.21,0,0,0-1.29-2c-1.56-1.09-16.31-.72-19.43-.63v-2.75h-1.23v35.86L313,523.46H311.1V537.2h6.82v19.47h.29v52.56h-3.16V590.89H307.8v18.34h-6.41V590.89h-7.26v18.34h-8.5V549.3h10.29V529.38h-2.76L261.9,397.64V360.25l20-.87v4.4L314,362.37s-10.35-2.64-8-4.46c5.39-4.25,12-3.54,4.91-3.86-2-.09-11.4-.37-19-.59a6.23,6.23,0,0,0-1.88-2.89c-2.26-1.58-23.64-1-28.15-.91v-4h-1.78v52L228.87,529.38h-2.78V549.3h10.3v59.93h-10.3v206H203.38v69.08H741.65Z\"\n      transform=\"translate(-203.38 -141.79)\"\n    />\n  ),\n});\n\nexport default function WithSubnavigation() {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Box>\n      <Flex\n        bg={useColorModeValue(\"white\", \"gray.800\")}\n        color={useColorModeValue(\"gray.600\", \"white\")}\n        minH={\"60px\"}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={\"solid\"}\n        borderColor={useColorModeValue(\"gray.200\", \"gray.900\")}\n        align={\"center\"}\n      >\n        <Flex\n          flex={{ base: 1, md: \"auto\" }}\n          ml={{ base: -2 }}\n          display={{ base: \"flex\", md: \"none\" }}\n        >\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant={\"ghost\"}\n            aria-label={\"Toggle Navigation\"}\n          />\n        </Flex>\n        <Flex flex={{ base: 1 }} justify={{ base: \"center\", md: \"start\" }}>\n          <Logo boxSize={8} color={useColorModeValue(\"gray.600\", \"white\")} />\n\n          <Flex display={{ base: \"none\", md: \"flex\" }} ml={10}>\n            <DesktopNav />\n          </Flex>\n        </Flex>\n\n        <Stack\n          flex={{ base: 1, md: 0 }}\n          justify={\"flex-end\"}\n          direction={\"row\"}\n          spacing={6}\n        >\n          <WalletButton />\n        </Stack>\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity>\n        <MobileNav />\n      </Collapse>\n    </Box>\n  );\n}\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport {\n  Button,\n  Divider,\n  Flex,\n  Box,\n  Link,\n  Input,\n  VStack,\n  Image,\n  Text,\n  Spacer,\n} from \"@chakra-ui/react\";\nimport useCollection from \"hooks/useCollection\";\nimport { CollectionMint } from \"contexts/Collection\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { COLLECTION_CLAIM_DELAY } from \"../../../constants\";\n\ninterface TokenCardProps {\n  token: CollectionMint;\n}\n\nconst TokenCard: React.FC<TokenCardProps> = ({ token }) => {\n  const wallet = useWallet();\n  const { userAccount, claimToken, spendTokens, createAccount } =\n    useCollection();\n\n  const [amount, setAmount] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(\"\");\n\n  const timeBeforeClaim = useCallback(() => {\n    const difference =\n      86400 -\n      new anchor.BN(Date.now() / 1000).sub(token.mint.claimed).toNumber();\n    const hours = Math.floor((difference / (60 * 60)) % 24);\n    const minutes = Math.floor((difference / 60) % 60);\n    const seconds = Math.floor(difference % 60);\n\n    return `${hours < 10 ? \"0\" + hours : hours}:${\n      minutes < 10 ? \"0\" + minutes : minutes\n    }:${seconds < 10 ? \"0\" + seconds : seconds}`;\n  }, [token]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTimeLeft(timeBeforeClaim());\n    }, 1000);\n    // Clear timeout if the component is unmounted\n    return () => clearTimeout(timer);\n  });\n\n  return (\n    <Flex\n      maxW=\"350px\"\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderWidth=\"2px\"\n      rounded=\"lg\"\n      shadow=\"lg\"\n    >\n      <Image src={token.imageUri} rounded=\"lg\" maxW=\"280px\" maxH=\"400px\" />\n      <Text fontSize=\"2xl\" fontWeight=\"bold\" maxW=\"280px\">\n        {token.metadata.data.data.name}\n      </Text>\n      <Divider />\n      <VStack spacing=\"8px\" w=\"100%\" p=\"15px\">\n        <Text fontSize=\"lg\" fontWeight=\"bold\">Rank {token.rank + 1}</Text>\n        <Flex direction=\"row\" w=\"100%\">\n          <Box>\n            <Text fontSize=\"lg\" fontWeight=\"bold\">\n              Points\n            </Text>\n          </Box>\n          <Spacer />\n          <Box>\n            <Text fontSize=\"md\" fontWeight=\"bold\">\n              {token.mint.received.toNumber() / 10 ** 9}\n            </Text>\n          </Box>\n        </Flex>\n        <Box>\n          <Link href={token.solsteadsUrl} target=\"_blank\">Check on Solsteads</Link>\n          </Box>\n        {wallet.connected && (\n          <>\n            {userAccount ? (\n              <>\n                <Flex gap=\"2px\">\n                  <Input onChange={(e) => setAmount(Number(e.target.value))} />\n                  <Button\n                    ml=\"5px\"\n                    colorScheme=\"blue\"\n                    disabled={\n                      userAccount.amount.toString() === \"0\" || amount === 0\n                    }\n                    onClick={() =>\n                      spendTokens(token, new anchor.BN(amount * 10 ** 9))\n                    }\n                  >\n                    Give\n                  </Button>\n                </Flex>\n                {token.owned && (\n                  <>\n                    <Button\n                      colorScheme=\"green\"\n                      onClick={() => claimToken(token)}\n                      disabled={new anchor.BN(Date.now() / 1000)\n                        .sub(token.mint.claimed)\n                        .lt(COLLECTION_CLAIM_DELAY)}\n                      isFullWidth\n                    >\n                      {new anchor.BN(Date.now() / 1000)\n                        .sub(token.mint.claimed)\n                        .lt(COLLECTION_CLAIM_DELAY)\n                        ? `Claimable in ${timeLeft}`\n                        : \"Claim\"}\n                    </Button>\n                  </>\n                )}\n              </>\n            ) : (\n              <Flex>\n                <Button colorScheme=\"teal\" onClick={createAccount} isFullWidth>\n                  Initialize\n                </Button>\n              </Flex>\n            )}\n          </>\n        )}\n      </VStack>\n    </Flex>\n  );\n};\n\nexport default TokenCard;\n","import { CollectionMint } from \"contexts/Collection\";\nimport { useCallback, useMemo, useState } from \"react\";\n\nimport useCollection from \"./useCollection\"\n\nexport default function usePaginatedCollection() {\n  const { mints: allMints } = useCollection()\n\n  const [currentPage, setCurrentPage] = useState(0)\n  const [pageSize, setPageSize] = useState(50)\n  \n  const sortedMints = useMemo(() => {\n    return allMints.sort((a, b) => b.mint.received.toNumber() - a.mint.received.toNumber())\n  }, [allMints])\n\n  const mints: CollectionMint[] = useMemo(() => {\n    return sortedMints.slice(pageSize * currentPage, pageSize * (currentPage + 1))\n  }, [sortedMints, currentPage, pageSize])\n\n  const isLastPage = useMemo(() => {\n    return pageSize * (currentPage + 1) > allMints.length\n  }, [pageSize, currentPage, allMints])\n\n  const nextPage = useCallback(() => {\n    if(!isLastPage) {\n      setCurrentPage(old => old + 1)\n    }\n  }, [isLastPage])\n\n  const previousPage = useCallback(() => {\n    if(currentPage !== 0) {\n      setCurrentPage(old => old - 1)\n    }\n  }, [currentPage])\n\n  return { mints, pageSize, currentPage, isLastPage, setPageSize, nextPage, previousPage };\n}","import React from \"react\";\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Flex,\n  Select,\n  Spinner,\n  Text,\n  Wrap,\n} from \"@chakra-ui/react\";\n\nimport useCollection from \"../../hooks/useCollection\";\nimport { TokenCard } from \"./components\";\nimport usePaginatedCollection from \"hooks/usePaginatedCollection\";\n\nconst Home: React.FC = () => {\n  const { collection } = useCollection();\n  const {\n    mints,\n    currentPage,\n    isLastPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  } = usePaginatedCollection();\n\n  return (\n    <Flex direction=\"column\" w=\"100%\" align=\"center\" p=\"10px\">\n      {collection ? (\n        <Box justify=\"center\" align=\"center\" w=\"full\">\n          <Wrap\n            align=\"center\"\n            justify=\"center\"\n            w=\"80%\"\n            direction=\"row\"\n            margin=\"auto\"\n          >\n            {mints.map((item, i) => (\n              <TokenCard key={item.imageUri + item.rank} token={item} />\n            ))}\n          </Wrap>\n          <ButtonGroup variant=\"outline\" isAttached spacing=\"6\" m=\"10px\">\n            <Button\n              w=\"100px\"\n              colorScheme=\"blue\"\n              onClick={previousPage}\n              disabled={currentPage === 0}\n            >\n              Previous\n            </Button>\n            <Button disabled>{currentPage + 1}</Button>\n            <Button\n              w=\"100px\"\n              colorScheme=\"blue\"\n              onClick={nextPage}\n              disabled={isLastPage}\n            >\n              Next\n            </Button>\n          </ButtonGroup>\n          <Box w=\"100px\">\n            <Text>Page Size</Text>\n            <Select onChange={(e) => setPageSize(Number(e.target.value))}>\n              <option value=\"25\">25</option>\n              <option value=\"50\">50</option>\n              <option value=\"100\">100</option>\n            </Select>\n          </Box>\n        </Box>\n      ) : (\n        <Box justify=\"center\" align=\"center\" width=\"100%\" my=\"40px\">\n          <Text fontSize=\"xl\" align=\"center\">\n            <b>Loading adventurers...</b>\n          </Text>\n          <Spinner size=\"xl\" color=\"pink.400\" thickness={\"8px\"} />\n        </Box>\n      )}\n    </Flex>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport {\n  Button,\n  Divider,\n  Flex,\n  Box,\n  Link,\n  Input,\n  VStack,\n  Image,\n  Text,\n  Spacer,\n} from \"@chakra-ui/react\";\nimport useCollection from \"hooks/useCollection\";\nimport { CollectionMint } from \"contexts/Collection\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { COLLECTION_CLAIM_DELAY } from \"../../../constants\";\n\ninterface TokenCardProps {\n  token: CollectionMint;\n}\n\nconst TokenCard: React.FC<TokenCardProps> = ({ token }) => {\n  const wallet = useWallet();\n  const { userAccount, claimToken, spendTokens, createAccount } =\n    useCollection();\n\n  const [amount, setAmount] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(\"\");\n\n  const timeBeforeClaim = useCallback(() => {\n    const difference =\n      86400 -\n      new anchor.BN(Date.now() / 1000).sub(token.mint.claimed).toNumber();\n    const hours = Math.floor((difference / (60 * 60)) % 24);\n    const minutes = Math.floor((difference / 60) % 60);\n    const seconds = Math.floor(difference % 60);\n\n    return `${hours < 10 ? \"0\" + hours : hours}:${\n      minutes < 10 ? \"0\" + minutes : minutes\n    }:${seconds < 10 ? \"0\" + seconds : seconds}`;\n  }, [token]);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTimeLeft(timeBeforeClaim());\n    }, 1000);\n    // Clear timeout if the component is unmounted\n    return () => clearTimeout(timer);\n  });\n\n  return (\n    <Flex\n      maxW=\"350px\"\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderWidth=\"2px\"\n      rounded=\"lg\"\n      shadow=\"lg\"\n    >\n      <Image src={token.imageUri} rounded=\"lg\" maxW=\"280px\" maxH=\"400px\" />\n      <Text fontSize=\"2xl\" fontWeight=\"bold\" maxW=\"280px\">\n        {token.metadata.data.data.name}\n      </Text>\n      <Divider />\n      <VStack spacing=\"8px\" w=\"100%\" p=\"15px\">\n        <Text fontSize=\"lg\" fontWeight=\"bold\">Rank {token.rank + 1}</Text>\n        <Flex direction=\"row\" w=\"100%\">\n          <Box>\n            <Text fontSize=\"lg\" fontWeight=\"bold\">\n              Points\n            </Text>\n          </Box>\n          <Spacer />\n          <Box>\n            <Text fontSize=\"md\" fontWeight=\"bold\">\n              {token.mint.received.toNumber() / 10 ** 9}\n            </Text>\n          </Box>\n        </Flex>\n        <Box>\n          <Link href={token.solsteadsUrl} target=\"_blank\">Check on Solsteads</Link>\n          </Box>\n        {wallet.connected && (\n          <>\n            {userAccount ? (\n              <>\n                <Flex gap=\"2px\">\n                  <Input onChange={(e) => setAmount(Number(e.target.value))} />\n                  <Button\n                    ml=\"5px\"\n                    colorScheme=\"blue\"\n                    disabled={\n                      userAccount.amount.toString() === \"0\" || amount === 0\n                    }\n                    onClick={() =>\n                      spendTokens(token, new anchor.BN(amount * 10 ** 9))\n                    }\n                  >\n                    Give\n                  </Button>\n                </Flex>\n                {token.owned && (\n                  <>\n                    <Button\n                      colorScheme=\"green\"\n                      onClick={() => claimToken(token)}\n                      disabled={new anchor.BN(Date.now() / 1000)\n                        .sub(token.mint.claimed)\n                        .lt(COLLECTION_CLAIM_DELAY)}\n                      isFullWidth\n                    >\n                      {new anchor.BN(Date.now() / 1000)\n                        .sub(token.mint.claimed)\n                        .lt(COLLECTION_CLAIM_DELAY)\n                        ? `Claimable in ${timeLeft}`\n                        : \"Claim\"}\n                    </Button>\n                  </>\n                )}\n              </>\n            ) : (\n              <Flex>\n                <Button colorScheme=\"teal\" onClick={createAccount} isFullWidth>\n                  Initialize\n                </Button>\n              </Flex>\n            )}\n          </>\n        )}\n      </VStack>\n    </Flex>\n  );\n};\n\nexport default TokenCard;\n","import React, { useMemo } from \"react\";\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Link,\n  Flex,\n  Select,\n  Spinner,\n  Text,\n  Wrap,\n} from \"@chakra-ui/react\";\n\nimport useCollection from \"../../hooks/useCollection\";\nimport { TokenCard } from \"./components\";\nimport usePaginatedCollection from \"hooks/usePaginatedCollection\";\n\nconst MySteads: React.FC = () => {\n  const { collection } = useCollection();\n  const {\n    mints: allMints,\n    currentPage,\n    isLastPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  } = usePaginatedCollection();\n\n  const mints = useMemo(() => {\n    return allMints.filter((e) => e.owned);\n  }, [allMints]);\n\n  console.log(allMints, mints);\n\n  return (\n    <Flex direction=\"column\" w=\"100%\" align=\"center\" p=\"10px\">\n      {collection ? (\n        <Box justify=\"center\" align=\"center\" w=\"full\">\n          {mints.length === 0 ? (\n            <Box my=\"20px\">\n              <Text fontSize=\"4xl\">You don't own any Solstead...</Text>\n              <Link fontSize=\"2xl\" href=\"https://solsteads.com/marketplaces\" target=\"_blank\">Find one here</Link>\n            </Box>\n          ) : (\n            <Box>\n              <Wrap\n                align=\"center\"\n                justify=\"center\"\n                w=\"100%\"\n                direction=\"row\"\n                margin=\"auto\"\n              >\n                {mints.map((item, i) => (\n                  <TokenCard key={item.imageUri + item.rank} token={item} />\n                ))}\n              </Wrap>\n              <ButtonGroup variant=\"outline\" isAttached spacing=\"6\" m=\"10px\">\n                <Button\n                  w=\"100px\"\n                  colorScheme=\"blue\"\n                  onClick={previousPage}\n                  disabled={currentPage === 0}\n                >\n                  Previous\n                </Button>\n                <Button disabled>{currentPage + 1}</Button>\n                <Button\n                  w=\"100px\"\n                  colorScheme=\"blue\"\n                  onClick={nextPage}\n                  disabled={isLastPage}\n                >\n                  Next\n                </Button>\n              </ButtonGroup>\n              <Box w=\"100px\">\n                <Text>Page Size</Text>\n                <Select onChange={(e) => setPageSize(Number(e.target.value))}>\n                  <option value=\"25\">25</option>\n                  <option value=\"50\">50</option>\n                  <option value=\"100\">100</option>\n                </Select>\n              </Box>\n            </Box>\n          )}\n        </Box>\n      ) : (\n        <Box justify=\"center\" align=\"center\" width=\"100%\" my=\"40px\">\n          <Text fontSize=\"xl\" align=\"center\">\n            <b>Loading adventurers...</b>\n          </Text>\n          <Spinner size=\"xl\" color=\"pink.400\" thickness={\"8px\"} />\n        </Box>\n      )}\n    </Flex>\n  );\n};\n\nexport default MySteads;\n","import React, { useCallback, useMemo } from \"react\";\nimport { Route, HashRouter as Router, Routes } from \"react-router-dom\";\nimport { ChakraProvider, useToast } from \"@chakra-ui/react\";\nimport { WalletAdapterNetwork, WalletError } from \"@solana/wallet-adapter-base\";\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletModalProvider } from \"@solana/wallet-adapter-react-ui\";\nimport {\n  getLedgerWallet,\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n  getTorusWallet,\n} from \"@solana/wallet-adapter-wallets\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\n\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./views/Home\";\nimport { CollectionProvider } from \"contexts/Collection\";\nimport MySteads from \"views/MySteads\";\n\nconst Providers: React.FC = ({ children }) => {\n  const network = WalletAdapterNetwork.Devnet;\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]);\n  const toast = useToast();\n\n  // @solana/wallet-adapter-wallets imports all the adapters but supports tree shaking --\n  // Only the wallets you want to support will be compiled into your application\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSlopeWallet(),\n      getSolflareWallet(),\n      getTorusWallet({\n        options: { clientId: \"Get a client ID @ https://developer.tor.us\" },\n      }),\n      getLedgerWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    [network]\n  );\n\n  const onError = useCallback(\n    (error: WalletError) =>\n      toast({\n        title: \"Error\",\n        description: error.message\n          ? `${error.name}: ${error.message}`\n          : error.name,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n      }),\n    [toast]\n  );\n\n  return (\n    <ChakraProvider>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} onError={onError}>\n          <WalletModalProvider>\n            <CollectionProvider>{children}</CollectionProvider>\n          </WalletModalProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ChakraProvider>\n  );\n};\n\nfunction App() {\n  return (\n    <Providers>\n      <Router>\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/mysteads\" element={<MySteads />} />\n        </Routes>\n      </Router>\n    </Providers>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}